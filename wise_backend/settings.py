"""
Django settings for wise_backend project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config
from rest_framework.permissions import AllowAny
from dotenv import load_dotenv
import dj_database_url

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-friw+4ju8-k_drce@5e88icvhz#a0kl%i9c+25v+6)r&vdte66"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "core",
    "corsheaders",
    "accounts",
    "wise_backend.logs",  # Add the logs app
    "django_extensions",
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "wise_backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "wise_backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': config('DB_NAME'),
#         'USER': config('DB_USER'),
#         'PASSWORD': config('DB_PASSWORD'),
#         'HOST': config('DB_HOST', default='localhost'),
#         'PORT': config('DB_PORT', default='5432'),
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST', default='localhost'),
        'PORT': config('DB_PORT', default='5432'),
    }
}

# DATABASES = {
#     'default': dj_database_url.config(
#         default=config('DATABASE_URL'),
#         conn_max_age=600,  # optional, for performance
#     )
# }

# DATABASES = {
#     'default': dj_database_url.config(
#         default=config('DATABASE_URL'),
#         conn_max_age=600,  # optional, for performance
#     )
# }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # Keeps default loggers
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',  # Change to DEBUG for more detailed logs
    },
}
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",  # React frontend
    "http://192.168.110.70:5173",  # React frontend on local IP
    "http://localhost:3000",  # Alternative React port
    "http://192.168.110.70:3000",  # Alternative React port on local IP
    "https://wise-video-api-dev.wiseagents.com",
]

# For development, allow all origins (remove this in production)
CORS_ALLOW_ALL_ORIGINS = True

# Allow credentials
CORS_ALLOW_CREDENTIALS = True

# Allow all headers and methods for development
CORS_ALLOW_ALL_HEADERS = True
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# Additional settings for mobile development
CORS_EXPOSE_HEADERS = ['Content-Type', 'X-CSRFToken']

# ========================
# REDIS CONFIGURATION
# ========================
REDIS_HOST = config('REDIS_HOST', default='localhost')
REDIS_PORT = config('REDIS_PORT', default=6379)
REDIS_DB = config('REDIS_DB', default=0)
REDIS_PASSWORD = config('REDIS_PASSWORD', default=None)
REDIS_USER = config('REDIS_USER', default=None)

SSL = config('SSL', default=False, cast=bool)
BACKEND_KEY = "rediss" if SSL else "redis"

base_url = f"{BACKEND_KEY}://{REDIS_USER}:{REDIS_PASSWORD}@{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}"
REDIS_URL = (
    f"{base_url}?ssl_cert_reqs=none"
    if SSL
    else base_url
)

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": REDIS_URL,
    }
}

# ========================
# CELERY CONFIGURATION
# ========================
# Celery Broker settings (Redis)
CELERY_BROKER_URL = REDIS_URL

# Celery Result Backend (Redis)
CELERY_RESULT_BACKEND = CELERY_BROKER_URL

# Celery Task Settings
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

# Celery Worker Settings
CELERY_WORKER_PREFETCH_MULTIPLIER = 1
CELERY_TASK_ACKS_LATE = True
CELERY_WORKER_MAX_TASKS_PER_CHILD = 1000

# Celery Task Routes (disabled for now - all tasks go to default queue)
# CELERY_TASK_ROUTES = {
#     'wise_backend.logs.tasks.*': {'queue': 'logs'},
#     'core.tasks.*': {'queue': 'core'},
# }

# Celery Beat Settings (for periodic tasks)
CELERY_BEAT_SCHEDULER = 'redbeat.RedBeatScheduler'
task_ignore_result = True

# Task Error Handling
CELERY_TASK_SOFT_TIME_LIMIT = 25 * 60  # 5 minutes
CELERY_TASK_TIME_LIMIT = 30 * 60  # 10 minutes
CELERY_TASK_IGNORE_RESULT = True


# Logging for Celery
CELERY_WORKER_HIJACK_ROOT_LOGGER = False

# ========================
# REDIS CLIENT CONFIGURATION
# ========================
REDIS_CONFIG = {
    'host': REDIS_HOST,
    'port': int(REDIS_PORT),
    'db': int(REDIS_DB),
    'socket_connect_timeout': 5,
    'socket_timeout': 5,
    'retry_on_timeout': True,
    'health_check_interval': 30,
}

# Only add password if it's set
if REDIS_PASSWORD:
    REDIS_CONFIG['password'] = REDIS_PASSWORD

# Trusted origins for CSRF (add your frontend URLs)
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:5173",
    "http://192.168.110.70:5173",
    "http://localhost:3000",
    "http://192.168.110.70:3000",
]

# Auth0 Credentials
AUTH0_DOMAIN = config("AUTH0_DOMAIN")
AUTH0_CLIENT_ID = config("AUTH0_CLIENT_ID")
AUTH0_CLIENT_SECRET = config("AUTH0_CLIENT_SECRET")
AUTH0_AUDIENCE = config("AUTH0_AUDIENCE")
AUTH0_ISSUER = config("AUTH0_ISSUER")


AUTH_USER_MODEL = "accounts.VideoAgentUser"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "accounts.authentication.Auth0JWTAuthentication",
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
}

# Disable authentication in development
if DEBUG:
    REST_FRAMEWORK["DEFAULT_PERMISSION_CLASSES"] = [
        "rest_framework.permissions.AllowAny",
    ]

DATA_UPLOAD_MAX_MEMORY_SIZE = 104857600  # 100MB